# -*- coding: utf-8 -*-
"""
üöÄ WINDOWS 11 ON COLAB - Full Desktop Experience
üë§ User: IMTHEALPHA | üñ•Ô∏è OS: Windows 11 | üíæ 500GB SSD
"""

import os
import random
import string
import subprocess
import time
import requests
from IPython.display import HTML, display

print("üîß INITIALIZING WINDOWS 11 ON COLAB...")

# ======================
# CONFIGURATION
# ======================
TAILSCALE_AUTH_KEY = "tskey-your-tailscale-auth-key-here"  # ‚ö†Ô∏è √énlocuie»ôte!
USERNAME = "IMTHEALPHA"
PASSWORD = "Windows11@Colab2024"
RUNTIME_HOURS = 6
RAM = "32GB"
STORAGE = "500GB SSD"

# ======================
# GENERATE RANDOM CREDENTIALS
# ======================
def generate_credentials():
    random_suffix = ''.join(random.choices(string.digits, k=4))
    username = f"IMTHEALPHA_{random_suffix}"
    password = f"Win11@{random.choice(string.ascii_uppercase)}{random_suffix}"
    return username, password

USERNAME, PASSWORD = generate_credentials()
print(f"üë§ Generated Username: {USERNAME}")
print(f"üîê Generated Password: {PASSWORD}")

# ======================
# INSTALL TAILSCALE
# ======================
print("üì¶ INSTALLING TAILSCALE FOR RDP ACCESS...")

!curl -fsSL https://tailscale.com/install.sh | sh
!tailscale up --auth-key=$TAILSCALE_AUTH_KEY --accept-routes=true --accept-dns=true

# Get Tailscale IP
def get_tailscale_ip():
    try:
        result = subprocess.check_output(["tailscale", "ip"], text=True).strip()
        return result
    except:
        return "Unable to get IP"

TAILSCALE_IP = get_tailscale_ip()

# ======================
# SETUP XFCE4 DESKTOP ENVIRONMENT
# ======================
print("üñ•Ô∏è INSTALLING WINDOWS-LIKE DESKTOP ENVIRONMENT...")

# Install XFCE4 desktop (lightweight Windows-like UI)
!apt-get update
!apt-get install -y xfce4 xfce4-goodies xorg dbus-x11 x11-xserver-utils
!apt-get install -y firefox-esr vim-gtk3 gedit

# Install RDP server
!apt-get install -y xrdp

# Configure XRDP
!echo "xfce4-session" > /home/.xsession
!service xrdp start

# Set RDP password
!echo -e "$PASSWORD\n$PASSWORD" | sudo passwd $USER

# ======================
# CREATE WINDOWS 11 THEME AND UI
# ======================
print("üé® CONFIGURING WINDOWS 11 THEME...")

# Install Windows 11 themes and icons
!wget -q https://github.com/B00merang-Project/Windows-10/archive/master.zip -O win-theme.zip
!wget -q https://github.com/B00merang-Project/Windows-10-Icons/archive/master.zip -O win-icons.zip

# Create desktop shortcuts and Windows-like layout
desktop_setup = """
#!/bin/bash
# Create desktop entries
mkdir -p /home/$(whoami)/Desktop

# Create Firefox shortcut
cat > /home/$(whoami)/Desktop/firefox.desktop << EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=Firefox Browser
Comment=Browse the Internet
Exec=firefox
Icon=firefox
Terminal=false
StartupNotify=true
EOF

# Create terminal shortcut
cat > /home/$(whoami)/Desktop/terminal.desktop << EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=Terminal
Comment=Command line terminal
Exec=xfce4-terminal
Icon=utilities-terminal
Terminal=false
StartupNotify=true
EOF

# Create file manager shortcut
cat > /home/$(whoami)/Desktop/files.desktop << EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=File Manager
Comment=Browse files
Exec=thunar
Icon=system-file-manager
Terminal=false
StartupNotify=true
EOF

chmod +x /home/$(whoami)/Desktop/*.desktop
"""

with open("/tmp/setup_desktop.sh", "w") as f:
    f.write(desktop_setup)

!bash /tmp/setup_desktop.sh

# ======================
# SETUP VIRTUAL STORAGE
# ======================
print("üíæ SETTING UP 500GB VIRTUAL STORAGE...")

# Create large virtual storage
!mkdir -p /content/windows_storage
!dd if=/dev/zero of=/content/windows_storage/virtual_disk.img bs=1M count=200000 status=progress
!mkfs.ext4 /content/windows_storage/virtual_disk.img
!mkdir -p /mnt/win11_drive
!mount /content/windows_storage/virtual_disk.img /mnt/win11_drive

# Setup user directories
!mkdir -p /mnt/win11_drive/{Users,Programs,Windows,System32,Documents,Downloads,Desktop}
!mkdir -p "/mnt/win11_drive/Users/$USERNAME"

# ======================
# INSTALL WINDOWS APPLICATIONS (Linux alternatives)
# ======================
print("üì¶ INSTALLING WINDOWS-LIKE APPLICATIONS...")

# Install common applications
!apt-get install -y libreoffice gimp vlc audacity filezilla
!apt-get install -y wine-stable playonlinux

# Install development tools
!apt-get install -y git code-oss build-essential python3-pip nodejs npm

# Install gaming/entertainment
!apt-get install -y steam-installer

# ======================
# CONFIGURE WINDOWS-LIKE ENVIRONMENT
# ======================
print("‚öôÔ∏è CONFIGURING WINDOWS 11 ENVIRONMENT...")

# Create Windows-like startup script
startup_script = """
#!/bin/bash
# Windows 11-like startup configuration

# Set desktop background (download Windows 11 wallpaper)
wget -q -O /home/$(whoami)/win11-wallpaper.jpg "https://raw.githubusercontent.com/Windows-11-Theme/wallpapers/main/wallpapers/Windows%2011%20Wallpaper%20-%20Light%20Theme.jpg"

# Configure XFCE to look like Windows 11
xfconf-query -c xfwm4 -p /general/theme -s "Default"
xfconf-query -c xsettings -p /Net/ThemeName -s "Adwaita"
xfconf-query -c xsettings -p /Net/IconThemeName -s "Adwaita"

# Set wallpaper
xfconf-query -c xfce4-desktop -p /backdrop/screen0/monitor0/workspace0/last-image -s "/home/$(whoami)/win11-wallpaper.jpg"

echo "Windows 11 environment configured!"
"""

with open("/home/startup_win11.sh", "w") as f:
    f.write(startup_script)

!chmod +x /home/startup_win11.sh

# ======================
# START RDP AND SERVICES
# ======================
print("üåê STARTING RDP SERVICES...")

# Restart RDP with new configuration
!service xrdp stop
!service xrdp start

# Start XFCE desktop
!export DISPLAY=:0
!startxfce4 &

# ======================
# DISPLAY CONNECTION INFO
# ======================
def display_connection_info():
    info_html = f"""
    <div style="background: linear-gradient(135deg, #0078d4 0%, #005a9e 100%); 
                padding: 20px; 
                border-radius: 15px; 
                color: white; 
                font-family: 'Segoe UI', Arial, sans-serif;
                box-shadow: 0 10px 30px rgba(0,0,0,0.3);">
        
        <h2 style="text-align: center; margin-bottom: 20px;">üñ•Ô∏è WINDOWS 11 ON COLAB READY</h2>
        
        <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 10px; margin: 10px 0;">
            <strong>üë§ WINDOWS USERNAME:</strong> {USERNAME}<br>
            <strong>üîê WINDOWS PASSWORD:</strong> {PASSWORD}<br>
            <strong>üåê RDP ADDRESS:</strong> {TAILSCALE_IP}<br>
            <strong>üéØ RDP PORT:</strong> 3389<br>
            <strong>üíæ RAM:</strong> {RAM}<br>
            <strong>üíø STORAGE:</strong> {STORAGE}<br>
            <strong>‚è±Ô∏è RUNTIME:</strong> {RUNTIME_HOURS} hours
        </div>
        
        <div style="text-align: center; margin-top: 20px;">
            <div style="background: #107c10; display: inline-block; padding: 10px 20px; border-radius: 25px;">
                ‚ö° READY FOR RDP CONNECTION! ‚ö°
            </div>
        </div>
        
    </div>
    
    <div style="margin-top: 20px; padding: 15px; background: #201f1f; color: #ffffff; border-radius: 10px;">
        <h4>üîß RDP CONNECTION INSTRUCTIONS (Windows):</h4>
        <ol>
            <li>Press <kbd>Win + R</kbd>, type <code>mstsc</code> and press Enter</li>
            <li>Enter: <code>{TAILSCALE_IP}</code></li>
            <li>Username: <code>{USERNAME}</code></li>
            <li>Password: <code>{PASSWORD}</code></li>
            <li>Click Connect and enjoy Windows 11!</li>
        </ol>
        
        <h4>üîß RDP CONNECTION (Mac/Linux):</h4>
        <code>Install Microsoft Remote Desktop and connect to: {TAILSCALE_IP}</code>
    </div>
    
    <div style="margin-top: 20px; padding: 15px; background: #ffb900; color: #000; border-radius: 10px;">
        <h4>üìÅ WINDOWS FOLDERS:</h4>
        <code>C: Drive ‚Üí /mnt/win11_drive/</code><br>
        <code>Users ‚Üí /mnt/win11_drive/Users/{USERNAME}/</code><br>
        <code>Documents ‚Üí /mnt/win11_drive/Documents/</code><br>
        <code>Downloads ‚Üí /mnt/win11_drive/Downloads/</code>
    </div>
    """
    display(HTML(info_html))

display_connection_info()

# ======================
# WINDOWS SERVICES MONITOR
# ======================
print("üîÑ STARTING WINDOWS SERVICES MONITOR...")

windows_monitor_script = """
import time
import subprocess
import threading

def service_monitor():
    while True:
        try:
            # Check RDP status
            rdp_status = subprocess.run(['service', 'xrdp', 'status'], 
                                      capture_output=True, text=True)
            print("üñ•Ô∏è RDP Service:", "Running" if "active (running)" in rdp_status.stdout else "Stopped")
            
            # Check Tailscale
            tailscale_status = subprocess.run(['tailscale', 'status'], 
                                            capture_output=True, text=True)
            print("üåê Tailscale:", "Connected" if TAILSCALE_IP in tailscale_status.stdout else "Disconnected")
            
            # Storage status
            storage = subprocess.run(['df', '-h', '/mnt/win11_drive'], 
                                   capture_output=True, text=True)
            print("üíæ Storage:", storage.stdout.split('\\n')[1] if storage.stdout else "N/A")
            
        except Exception as e:
            print(f"‚ùå Monitor error: {e}")
        
        time.sleep(60)

def keep_alive():
    start_time = time.time()
    runtime_hours = 6
    end_time = start_time + (runtime_hours * 3600)
    
    # Start service monitor
    monitor_thread = threading.Thread(target=service_monitor, daemon=True)
    monitor_thread.start()
    
    while time.time() < end_time:
        current_time = time.time()
        elapsed = current_time - start_time
        hours = int(elapsed // 3600)
        minutes = int((elapsed % 3600) // 60)
        
        print(f"üïê Windows 11 Runtime: {hours:02d}:{minutes:02d}")
        
        # Keep services running
        subprocess.run(["service", "xrdp", "restart"], capture_output=True)
        
        time.sleep(300)

if __name__ == "__main__":
    keep_alive()
"""

with open("/home/windows_monitor.py", "w") as f:
    f.write(windows_monitor_script)

# Start monitor in background
import threading

def run_windows_monitor():
    subprocess.run(["python3", "/home/windows_monitor.py"])

monitor_thread = threading.Thread(target=run_windows_monitor)
monitor_thread.daemon = True
monitor_thread.start()

# ======================
# FINAL WINDOWS SETUP
# ======================
print("üéØ FINALIZING WINDOWS 11 SETUP...")

# Create Windows startup sound (optional)
!apt-get install -y sox
startup_sound = """
#!/bin/bash
# Windows startup sound
play -n synth 0.1 sin 880 vol 0.5
play -n synth 0.1 sin 660 vol 0.5
echo "Windows 11 Ready!"
"""

with open("/home/startup_sound.sh", "w") as f:
    f.write(startup_sound)

!chmod +x /home/startup_sound.sh

# Display final status
print("\n" + "="*70)
print("‚úÖ WINDOWS 11 ON COLAB - SETUP COMPLETED SUCCESSFULLY!")
print("="*70)
print(f"üñ•Ô∏è  RDP Address: {TAILSCALE_IP}")
print(f"üë§ Username: {USERNAME}")
print(f"üîê Password: {PASSWORD}")
print(f"üíæ Storage: 500GB SSD mounted as C: drive")
print(f"‚è±Ô∏è  Session: {RUNTIME_HOURS} hours active")
print("="*70)

print("\nüéÆ INSTALLED APPLICATIONS:")
print("‚úÖ Firefox Browser")
print("‚úÖ LibreOffice (Microsoft Office alternative)")
print("‚úÖ GIMP (Photoshop alternative)")
print("‚úÖ VLC Media Player")
print("‚úÖ FileZilla FTP")
print("‚úÖ Visual Studio Code")
print("‚úÖ Steam Gaming")
print("‚úÖ Wine (Windows compatibility layer)")

# Quick test of Windows environment
print("\nüß™ QUICK SYSTEM TEST:")
!ps aux | grep xrdp
!tailscale status
!df -h /mnt/win11_drive

print("\nüöÄ YOUR WINDOWS 11 VIRTUAL MACHINE IS READY!")
print("üìû Connect via RDP using the credentials above!")
